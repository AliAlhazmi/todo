{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/Layout.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","this","placeholder","onChange","onClick","style","backgroundColor","border","marginLeft","color","Component","btn","marginBottom","todoCont","minWidth","maxWidth","overflow","display","justifyContent","todo","textDecoration","toggleComplete","deleteTodo","Layout","todos","todosToshow","addTodo","map","updateTodoShow","string","filter","removeAllCompletedTodos","Todo","length","some","App","className","minHeight","margin","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c26e940.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport shortid from 'shortid'\r\n\r\nexport default class TodoForm extends Component {\r\n    state =\r\n    {\r\n        text: \"\"\r\n    };\r\n    \r\n    handleChange = (event) => {\r\n        this.setState( {  \r\n                [event.target.name]: event.target.value  //updates the state\r\n            });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmit({\r\n            id: shortid.generate(),\r\n            text: this.state.text,\r\n            complete: false\r\n         })\r\n        this.setState(\r\n            {\r\n                text:\"\"\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const btn = {\r\n            backgroundColor: 'green',\r\n            border: 'none',\r\n            marginLeft: '0.45ch',\r\n            color: 'white'\r\n          };\r\n        return (\r\n            <form onSubmit = {this.handleSubmit}>\r\n                <br></br><br></br>\r\n                <input\r\n                name = \"text\"\r\n                value = {this.state.text}\r\n                placeholder =\"what to do?\"\r\n                onChange = {this.handleChange}\r\n                />\r\n                <button onClick = {this.handleSubmit} style={btn}>add</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","  \r\nimport React from \"react\";\r\nconst btn = {\r\n  backgroundColor: 'red',\r\n  border: 'none',\r\n  marginLeft: '1ch',\r\n  marginBottom: '1ch',\r\n  color: 'white'\r\n};\r\nconst todoCont = {\r\n  backgroundColor: 'wheat',\r\n  minWidth: '19ch',\r\n  maxWidth: '19ch',\r\n  overflow: 'auto',\r\n}\r\nexport default (props) => (\r\n  \r\n  <div style={{display:\"flex\", justifyContent: \"center\"}} >\r\n    <div\r\n      style={{\r\n        color:  props.todo.complete ? 'gray' :\"\",\r\n        textDecoration:props.todo.complete ? 'line-through' :\"\",\r\n      }}\r\n      onClick={props.toggleComplete}>\r\n       <div style={todoCont}>{props.todo.text}</div>\r\n    </div>\r\n    \r\n    <button onClick={props.deleteTodo} style={btn}>Del</button>\r\n </div>\r\n);","import React, { Component } from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo';\r\nimport '../App.css';\r\n\r\nexport default class Layout extends Component {\r\n    state = {\r\n        todos: [],\r\n        todosToshow: 'all'\r\n    };\r\n\r\n    addTodo = (todo) =>{\r\n        this.setState({\r\n            todos: [todo, ...this.state.todos]\r\n        })\r\n    }\r\n    toggleComplete = (id) => {\r\n        this.setState({\r\n                    //loop through the todos and find one with the correct id\r\n            todos: this.state.todos.map(todo =>{ \r\n                if (todo.id === id)\r\n                {\r\n                    return{\r\n                        ...todo,\r\n                        complete: !(todo.complete),\r\n                        \r\n                    }\r\n                } \r\n                else {\r\n                    return todo;\r\n                }\r\n            })\r\n        })\r\n    }\r\n    updateTodoShow = string => {\r\n        this.setState({\r\n            todosToshow: string\r\n        })\r\n    }\r\n    //perma delete\r\n    deleteTodo = id => {\r\n        this.setState({\r\n            //if its not the id'd todo then dont delete it\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        })\r\n    }\r\n        //perma remove completed todos\r\n        removeAllCompletedTodos = () => {\r\n            this.setState({\r\n                //if its not a completed todo then keep it\r\n                todos: this.state.todos.filter(todo => !todo.complete)\r\n            })\r\n        }\r\n \r\n    \r\n    \r\n    \r\n    render() {\r\n       let todos = []; \r\n\r\n        //for the Show feature ---- vvv\r\n        if(this.state.todosToshow === 'all')\r\n        {\r\n            todos = this.state.todos;\r\n        }\r\n        else if(this.state.todosToshow === \"incomplete\")\r\n        {\r\n            todos = this.state.todos.filter( todo => !todo.complete)\r\n        }\r\n        else if(this.state.todosToshow === \"complete\")\r\n        {\r\n            todos = this.state.todos.filter( todo => todo.complete)\r\n        }\r\n        //for the Show feature ---- ^^^\r\n        const btn = {\r\n            backgroundColor: '#61dafb',\r\n            border: 'none',\r\n            marginLeft: '1ch',\r\n            color: 'white'\r\n          };\r\n        return (\r\n            <div>\r\n                \r\n                <TodoForm onSubmit = {this.addTodo}/>\r\n                 {todos.map(todo => (\r\n                    <Todo key={todo.id} \r\n                    toggleComplete={()=>this.toggleComplete(todo.id)} //we used arrow so we can pass the ID which is stored in the map\r\n                    deleteTodo={()=> this.deleteTodo(todo.id)}\r\n                    todo= {todo}/>\r\n                ))}\r\n                {/* filter() goes through the todos and delete the ones the dont meet the condition */}\r\n                <div>Incomplete Todos: {this.state.todos.filter( todo => !todo.complete).length}</div>\r\n                <div>\r\n                    <button onClick={() => this.updateTodoShow(\"all\")} style={btn}>Show All</button> \r\n                    <button onClick={() => this.updateTodoShow(\"incomplete\")} style={btn}>Show uncomplete </button>\r\n                    <button onClick={() => this.updateTodoShow(\"complete\")} style={btn}>Show Completed</button>\r\n\r\n                    {/* Only render the button if there is any completed Todos \r\n                        we used some instead of filter cuz we only need to find 1 complete todo (it exists earlier than filter) */}\r\n                    {this.state.todos.some(todo => todo.complete) ? (\r\n                    <div> \r\n                    <button onClick={this.removeAllCompletedTodos}style={btn} >Remove All completed</button>\r\n                    </div>) :null}\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport Layout from './components/Layout';\nfunction App() {\n  const container = {\n    backgroundColor: '#ede1d4',\n    maxWidth: '870px',\n    minWidth: '70ch',\n    minHeight: '40ch',\n    margin: 'auto',\n    width: '30%',\n  }\n  return (\n    <div className=\"App\">\n        <header className=\"nav\">\n          <h1>Todo list</h1>\n        </header>\n        <div style={container}>\n        <Layout/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}